// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_LOCAL")
}


model User {
  id        String    @id @default(uuid())
  username  String    @unique
  clerkId   String    @unique @default(uuid())
  email     String    @unique
  name      String
  bio       String?
  location  String?
  website   String?
  avatar    String?
  banner    String?
  tweets    Tweet[]   @relation("AuthorTweets")
  likes     Like[]
  retweets  Retweet[] 
  followers Follow[]  @relation("Following")
  following Follow[]  @relation("Follower")
  bookmarks Bookmark[]
  createdAt DateTime  @default(now())
}

model Tweet {
  id         String    @id @default(uuid())
  content    String?
  author     User      @relation("AuthorTweets", fields: [authorId], references: [id])
  authorId   String
  image      String?
  isSensitive Boolean @default(false)
  parent     Tweet?    @relation("ReplyTo", fields: [parentId], references: [id])
  parentId   String?
  replies    Tweet[]   @relation("ReplyTo")
  likes      Like[]
  retweets   Retweet[]
  bookmarks  Bookmark[]
  createdAt  DateTime  @default(now())
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  createdAt DateTime @default(now())

  @@unique([userId, tweetId]) // prevent duplicate likes
}

model Retweet {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  createdAt DateTime @default(now())

  @@unique([userId, tweetId]) // prevent duplicate retweets
}

model Follow {
  id         String   @id @default(uuid())
  follower   User     @relation("Follower", fields: [followerId], references: [id])
  followerId String
  following  User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt  DateTime @default(now())

  @@unique([followerId, followingId]) // prevent following same user twice
}

model Bookmark {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  createdAt DateTime @default(now())

  @@unique([userId, tweetId]) // prevent duplicate bookmarks
}
